from src.sql.create_bd import create_database_and_tables
from src.sql.insert_data import insert_data
from src.sql.dbmanager import DBManager


def user_greeting():
    """
    Функция начала работы  c PostgreSQL
    """
    print('Вас приветствует менеджер по работе с PostgreSQL!')
    print('Данная программа позволит получить данные о работодателях и их вакансиях с сайта HeadHunter.ru,'
          ' а также сохранять полученные данные в созданную вами базу данных.')
    while True:
        print('Если вы хотите создать свою базу данных и таблицы, нажмите 1')
        print('Если вы хотите покинуть программу, нажмите 2')
        choice = input('Введите номер выбранного варианта: ')
        if choice == '1':
            return 1
        elif choice == '2':
            print('До свидания!')
            break
        else:
            print('Некорректный выбор. Попробуйте еще раз.')


def creat_db_t_by_user():
    """
    Функция создания базы данных и реализации таблиц пользователем
    """
    if user_greeting() == 1:
        database_name = input('Введите название базы данных, которую вы хотите создать: ').lower()
        # Создание базы данных и таблиц
        create_database_and_tables(database_name)
        # Инструкция для активации базы данных
        print('Для активации базы данных зайдите в pgAdmin4, нажмите правой кнопкой мыши на PostgreSQL '
              'и выберите команду Refresh.')
        print('Как только в разделе баз данных появится ваша база данных, нажмите на название левой кнопкой мыши для '
              'ее активации.')


def db_user_work():
    """
    Функция работы с PostgreSQL
    """
    print('Следующий этап реализации нашей программы: заполнение таблиц данными о работодателях и их вакансий')
    while True:
        print('Если вы хотите начать работу с таблицами, нажмите 1')
        print('Если вы хотите покинуть программу, нажмите 2')
        choice = input('Введите номер выбранного варианта: ')
        if choice == '1':
            return 1
        elif choice == '2':
            print('До свидания!')
            break
        else:
            print('Некорректный выбор. Попробуйте еще раз.')


def filling_tables_by_user():
    """
     Функция внесение данных в таблицы пользователем
     """
    if db_user_work() == 1:
        db_input = input('Введите название базы данных: ')  # Запрос названия базы данных у пользователя
        print(
            'Для вашего удобства были отобраны 10 наиболее популярных компаний : Яндекс, Авито, VK, Delivery Club, '
            'Сбер, Альфа Банк, Ланит, Тензор, Carprice, USETECH.')
        employer_input = input('Введите название компаний, для получения вакансий: ')  # Запрос названия компании у
        # пользователя
        if db_input:  # Проверка, что пользователь ввел название базы данных
            if employer_input:  # Проверка, что пользователь ввел название компании
                insert_data(db_input, employer_input)  # Внесение данных в таблицы
                print(f'Данные по {employer_input} и по вакансиям этой компании успешно внесены в таблицы')
            else:
                print('Вы не ввели название компании')
        else:
            print('Вы не ввели название базы данных')


def dbmanager_by_user():
    """
    Функция для взаимодействия с пользователем и вывода информации о вакансиях.
    """
    print('Теперь получим определенную информацию из данных в таблицах!')
    while True:
        print('Если вы хотите начать работу с таблицами, нажмите 1')
        print('Если вы хотите покинуть программу, нажмите 2')
        choice = input('Введите номер выбранного варианта: ')
        if choice == '1':
            db_name = input('Введите название базы данных: ')
            db_manager = DBManager(db_name)
            job_options = "Для выхода из программы нажмите '1'\n" \
                          "Для получения списка всех компаний и количества вакансий у каждой компании нажмите '2'\n" \
                          "Для получения списка всех вакансий с указанием названия компании," \
                          " названия вакансии и зарплаты и ссылки на вакансию нажмите '3'\n" \
                          "Для получения средней зарплаты по вакансиям нажмите '4'\n" \
                          "Для получения списка всех вакансий," \
                          " у которых зарплата выше средней по всем вакансиям нажмите '5'\n" \
                          "Для получения списка всех вакансий," \
                          " в названии которых содержатся переданные в метод слова, нажмите '6'\n" \
                          "Для возврата в меню, нажмите '0'"
            print(job_options)
            while True:
                user_input = input('Выбор запроса: ')
                if user_input == '1':
                    print('До свидания!')
                    break
                elif user_input == '2':
                    db_manager.get_companies_and_vacancies_count()  # получает список всех компаний и количество
                    # вакансий у каждой компании
                    print("Запрос осуществлен, для возврата в меню нажмите '0'")
                elif user_input == '3':
                    db_manager.get_all_vacancies()  # получает список всех вакансий с указанием названия компании,
                    # названия
                    # вакансии и зарплаты и ссылки на вакансию.
                    print("Запрос осуществлен, для возврата в меню нажмите '0'")
                elif user_input == '4':
                    db_manager.get_avg_salary()  # получает среднюю зарплату по вакансиям.
                    print("Запрос осуществлен, для возврата в меню нажмите '0'")
                elif user_input == '5':
                    db_manager.get_vacancies_with_higher_salary()  # получает список всех вакансий, у которых
                    # зарплата выше
                    # средней по всем вакансиям.
                    print("Запрос осуществлен, для возврата в меню нажмите '0'")
                elif user_input == '6':
                    user_input = input()
                    db_manager.get_vacancies_with_keyword(
                        user_input)  # получает список всех вакансий, в названии которых содержатся переданные в
                    # метод слова
                    print("Запрос осуществлен, для возврата в меню нажмите '0'")
                elif user_input == '0':
                    print(job_options)
                else:
                    print("Неверное значение! Введите цифру от 1-6!")
        elif choice == '2':
            print('До свидания!')
            break
        else:
            print('Некорректный выбор. Попробуйте еще раз.')


def main():
    """
    Функция взаимодействия с пользователем
    """
    creat_db_t_by_user()  # создание базы данных и формирование таблиц
    filling_tables_by_user()  # внесение информации о компании и вакансий в таблицы
    dbmanager_by_user()  # работа с sql запросами
